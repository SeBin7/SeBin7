name: Update recent repos

on:
  schedule:
    - cron: "0 0 * * 1,4"   # 월/목 00:00 UTC (KST 09:00)
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      GH_USER: SeBin7
      EXCLUDE_REPOS: "PRsystem,BitTrip_1.0,Hansung"
      COUNT: "6"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Build and inject recent list (pure Python)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'PY'
          import json, os, re, urllib.request

          GH_USER  = os.environ.get("GH_USER", "SeBin7")
          TOKEN    = os.environ.get("GITHUB_TOKEN", "")
          EXCLUDE  = {s.strip() for s in os.environ.get("EXCLUDE_REPOS","").split(",") if s.strip()}
          COUNT    = int(os.environ.get("COUNT","6"))

          # --- GitHub API 호출
          req = urllib.request.Request(
              f"https://api.github.com/users/{GH_USER}/repos?per_page=100&sort=updated",
              headers={
                  "Accept": "application/vnd.github+json",
                  **({"Authorization": f"Bearer {TOKEN}"} if TOKEN else {})
              }
          )
          with urllib.request.urlopen(req) as r:
              data = json.load(r)

          # --- (선택) 프로필/블로그 레포 제외 세트
          skip = {"SeBin7", "SeBin7.github.io"}  # 원치 않으면 비우거나 항목 제거

          # --- 필터: 포크/아카이브 제외 + 제외목록 + skip 제외
          repos = [
              x for x in data
              if (not x.get("fork"))
              and (not x.get("archived"))
              and (x.get("name") not in (EXCLUDE | skip))
          ][:COUNT]

          def nice(desc: str) -> str:
              if not desc:
                  return "No description"
              s = " ".join(desc.splitlines()).strip()
              return s if s else "No description"

          # --- Markdown 생성
          lines = [""] + [
              f'- <a href="{x["html_url"]}"><b>{x["name"]}</b></a> — {nice(x.get("description"))} '
              f'<sub><i>({(x.get("updated_at","").split("T")[0])})</i></sub>'
              for x in repos
          ] + [""]

          recent_md = "\n".join(lines)

          # --- README 로드 & 마커 확보
          if not os.path.exists("README.md"):
              with open("README.md","w",encoding="utf-8") as f:
                  f.write(f"# {GH_USER}\n\n")

          with open("README.md","r",encoding="utf-8") as f:
              readme = f.read()

          start = "<!--RECENT_REPOS_START-->"
          end   = "<!--RECENT_REPOS_END-->"

          if start not in readme or end not in readme:
              readme += f"\n## 🔄 Recently Updated\n{start}\n<!-- updated by GitHub Actions -->\n{end}\n"

          # --- 백레퍼런스(\1,\3) 문제 없는 안전 치환
          pattern = re.compile(rf"({re.escape(start)})(.*?)({re.escape(end)})", re.DOTALL)
          new_readme = pattern.sub(lambda m: m.group(1) + "\n" + recent_md + "\n" + m.group(3), readme)

          if new_readme != readme:
              with open("README.md","w",encoding="utf-8") as f:
                  f.write(new_readme)
              print("README.md updated.")
          else:
              print("No changes to README.md.")
          PY

      - name: Commit & push
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add README.md || true
          git diff --staged --quiet && echo "No changes" && exit 0
          git commit -m "docs(readme): auto-update recent repos"
          git push
